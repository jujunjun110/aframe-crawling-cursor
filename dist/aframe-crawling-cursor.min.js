!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={exports:{},id:r,loaded:!1};return t[r].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.m=t,i.c=e,i.p="",i(0)}([function(t,e){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("crawling-cursor",{dependencies:["raycaster"],schema:{target:{type:"selector"},offset:{type:"number",default:.05},interval:{type:"int",default:0}},multiple:!1,init:function(){this.intersecting=0,this.lastUpdate=0,null===this.data.target&&(this.data.target=document.querySelector("a-cursor"),null===this.data.target&&console.warn("Please put a-cursor in a document")),this.positionCursor=function(t){if(null!==t&&null!=t.face){var e=t.object.matrixWorld;e.setPosition(new THREE.Vector3(0,0,0));var i=t.face.normal.clone().applyMatrix4(e).normalize(),r=(new THREE.Vector3).addVectors(t.point,i);this.data.target.object3D.lookAt(r);var s=(new THREE.Vector3).addVectors(t.point,i.multiplyScalar(this.data.offset));this.data.target.setAttribute("position",s)}},this.intersectListener=(t=>{this.intersecting=this.el.components.raycaster.intersectedEls.length,this.data.target.object3D.visible=this.intersecting>0}),this.el.addEventListener("raycaster-intersection",this.intersectListener),this.el.addEventListener("raycaster-intersection-cleared",this.intersectListener)},tick:function(t,e){this.intersecting>0&&t-this.lastUpdate>this.data.interval&&(this.lastUpdate=t,this.positionCursor(this.el.components.raycaster.getIntersection(this.el.components.raycaster.intersectedEls.find(t=>this.data.target!==t&&!t.classList.contains("ignore-ray")))))},remove:function(){this.el.removeEventListener("raycaster-intersection",this.intersectListener),this.el.removeEventListener("raycaster-intersection-cleared",this.intersectListener)}})}]);